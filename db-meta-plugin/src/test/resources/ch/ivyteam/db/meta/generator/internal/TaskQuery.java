package ch.ivyteam.meta.query;

import javax.annotation.Generated;
import org.apache.commons.lang.StringUtils;

import ch.ivyteam.api.API;
import ch.ivyteam.api.IvyScriptVisibility;
import ch.ivyteam.api.PublicAPI;
import ch.ivyteam.api.Reviewed;
import ch.ivyteam.db.sql.ColumnName;
import ch.ivyteam.ivy.persistence.query.Query;
import ch.ivyteam.ivy.persistence.query.IFluentQueryExecutor;
import ch.ivyteam.ivy.persistence.query.IQueryExecutor;
import ch.ivyteam.ivy.persistence.restricted.client.query.FluentQueryExecutor;
import ch.ivyteam.ivy.workflow.internal.db.*;
import ch.ivyteam.ivy.workflow.internal.query.TaskQueryExecutorProvider;

/**
 *
 */
@PublicAPI(IvyScriptVisibility.EXPERT)
@Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
@Generated(value={"ch.ivyteam.db.meta.generator.internal.query.JavaQueryClassGenerator"}, date="13.07.2017 15:11:06")
public class TaskQuery extends Query<ch.ivyteam.ivy.workflow.ITask>
{
  protected TaskQuery()
  {
    super();
  }

  TaskQuery (Query<ch.ivyteam.ivy.workflow.ITask> parentQuery)
  {
    super(parentQuery);
  }

  /**
   * Creates a new query
   * @return A new instance of TaskQuery
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public static TaskQuery create()
  {
    return new TaskQuery();
  }

  /**
   * Creates a new query based on the given JSON. See {@link TaskQuery} for an example.
   * @param json the serialized TaskQuery, generated by {@link #asJson()} 
   * @return A new instance of TaskQuery
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  public static TaskQuery fromJson(String json)
  {
    return Query.fromJson(json, create());
  }

  public static TaskQuery create(IQueryExecutor<ch.ivyteam.ivy.workflow.ITask> executor)
  {
    TaskQuery query = new TaskQuery();
    query.executor = executor;
    return query;
  }
  
  /**
   * <p>Provides a fluent API to execute this query and fetch its results.</p>
   * @return fluent API to execute this query.
   */
  @PublicAPI(IvyScriptVisibility.NOVICE)
  public IFluentQueryExecutor<ch.ivyteam.ivy.workflow.ITask> executor()
  {
    IQueryExecutor<ch.ivyteam.ivy.workflow.ITask> exec = executor;
    if (exec == null)
    {
      exec = new TaskQueryExecutorProvider().get();
      if (exec == null)
      {
        throw new IllegalStateException("query must be set up with the method create(IQueryExecutor<ch.ivyteam.ivy.workflow.ITask> executor) in order to be executuable");
      }
    }
    return new FluentQueryExecutor<>(exec, this);
  }

  /**
   * <p>Returns an object which contains the aggregation part for this query.<br>
   * It provides methods to perform aggregations on the query. For each aggregation a column is added to the result set. </p>
 *
   * @return aggregate query
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public IAggregationQuery aggregate()
  {
    validate();
    return new AggregationQuery(this);
  }

  /**
   * <p>Returns an object which contains the group by part for this query.<br>
   * It provides methods to group the result by certain fields.</p>
 *

   * @return A query group by builder to add group by statements
   * @see AggregationQuery#countRows()
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public IGroupByQueryColumns groupBy()
  {
    validate();
    return new GroupByQuery(this);
  }

  /**
   * <p>Returns an object which contains the order by part for this query.<br>
   * It provides methods to order the result by certain columns.</p>
   * @return An order by query builder to add order by statements
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public IOrderByQueryColumns orderBy()
  {
    validate();
    return new OrderByQuery(this);
  }

  /**
   * <p>Returns an object which contains the where part for this query.<br>
   * It provides methods to filter the result by certain columns.</p>
   * @return An filter query builder to add where statements
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public IFilterQuery where() 
  {
    validate();
    return new FilterQuery(this);
  }

  /**
   * Provides filter functionality for {@link ch.ivyteam.ivy.workflow.ITask}
   * <p>
   * <b>Example:</b>
   * <code><pre>TaskQuery.create().where().customVarCharField1().isEqual("Hello World").and().customDecimalField2().isGreaterThan(15.3);</pre></code>
   * Corresponds to SQL:
   * <code><pre>SELECT * FROM IWA_IWA_Task WHERE CustomVarCharField1 = 'Hello World' AND CustomDecimalField1 > 15.3</pre></code>
   * </p>
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IFilterQuery extends IFilterableColumns, IFilterLink
  {
  }

  /**
   * Provides filter functionality for {@link ch.ivyteam.ivy.workflow.ITask}
   * <p>
   * <b>Example:</b>
   * <code><pre>TaskQuery.create().where().customVarCharField1().isEqual("Hello World").and().customDecimalField2().isGreaterThan(15.3);</pre></code>
   * Corresponds to SQL:
   * <code><pre>SELECT * FROM IWA_IWA_Task WHERE CustomVarCharField1 = 'Hello World' AND CustomDecimalField1 > 15.3</pre></code>
   * </p>
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IFilterableColumns
  {
    /**
     * <p>Adds a condition, which negates a set of <code>where</code> conditions given by the <code>otherQuery</code> with a NOT expression.<br/>
     * Only the <code>where</code> clause of the given <code>otherQuery</code> is considered. All other parts are ignored.</p>
     * <p>SQL part: <code>NOT([otherSqlExpression])</code></p>
     * <p>
     *   <b>Example:</b>
     *   <code><pre>TaskQuery subQuery = TaskQuery.create().where()
     *      .customVarCharField1().equals("a").or()
     *      .customVarCharField2().equals("b")
     *TaskQuery query = TaskQuery.create().where()
     *      .not(subQuery)</pre></code>
     *   Corresponds to SQL:
     *   <code><pre>SELECT * FROM IWA_IWA_Task
     *  WHERE NOT(
     *    customVarCharField1 = 'a'
     *    OR customVarCharField2 = 'b')</pre></code>
     * </p>
     * @param otherQuery Query from which the negated <code>where</code> part will be added to the current query.
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterQuery not(TaskQuery otherQuery);

    /**
     * <p>Prepares a where statement for the column <code>TaskId</code>.<br>
     * Must be followed by a call to a condition method.</p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public IIntegerColumnFilterQuery taskId();

    /**
     * <p>Prepares a where statement for the column <code>ActivatorName</code>.<br>
     * Must be followed by a call to a condition method.</p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public IStringColumnFilterQuery activatorName();

    /**
     * <p>Prepares a where statement for the column <code>ActivatorDisplayName</code>.<br>
     * Must be followed by a call to a condition method.</p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public IStringColumnFilterQuery activatorDisplayName();

    /**
     * <p>Prepares a where statement for the column <code>ExpiryActivatorDisplayName</code>.<br>
     * Must be followed by a call to a condition method.</p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public IStringColumnFilterQuery expiryActivatorDisplayName();

    /**
     * <p>Prepares a where statement for the column <code>CurrentActivatorDisplayName</code>.<br>
     * Must be followed by a call to a condition method.</p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public IStringColumnFilterQuery currentActivatorDisplayName();

    /**
     * <p>Prepares a where statement for the column <code>IsUnassigned</code>.<br>
     * Must be followed by a call to a condition method.</p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public IBooleanColumnFilterQuery isUnassigned();

  }

  /**
   * Provides filter functionality for {@link ch.ivyteam.ivy.workflow.ITask}
   * <p>
   * <b>Example:</b>
   * <code><pre>TaskQuery.create().where().customVarCharField1().isEqual("Hello World").and().customDecimalField2().isGreaterThan(15.3);</pre></code>
   * Corresponds to SQL:
   * <code><pre>SELECT * FROM IWA_IWA_Task WHERE CustomVarCharField1 = 'Hello World' AND CustomDecimalField1 > 15.3</pre></code>
   * </p>
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public static class FilterQuery extends FilterLink implements IFilterQuery
  {
    private FilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery)
    {
      super(parentQuery);
    }


    /**
     * <p>Adds a condition, which negates a set of where conditions given by the <code>otherQuery</code> with a NOT expression.<br/>
     * Only the where clause of the given <code>otherQuery</code> is considered. All other parts are ignored.</p>
     * <p>SQL part: <code>NOT([otherSqlExpression])</code></p>
     * <p>
     *   <b>Example:</b>
     *   <code><pre>TaskQuery subQuery = TaskQuery.create().where()
     *      .customVarCharField1().equals("a").or()
     *      .customVarCharField2().equals("b")
     *TaskQuery query = TaskQuery.create().where()
     *      .not(subQuery)</pre></code>
     *   Corresponds to SQL:
     *   <code><pre>SELECT * FROM IWA_IWA_Task
     *  WHERE NOT(
     *    customVarCharField1 = 'a'
     *    OR customVarCharField2 = 'b')</pre></code>
     * </p>
     * @param otherQuery Query from which the negated where part will be added to the current query.
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public FilterQuery not(TaskQuery otherQuery)
    {
      endColumnFilter();
      getQueryBuilder().not(getFilterForSubExpression(otherQuery));
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterableColumns#taskId()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public IIntegerColumnFilterQuery taskId()
    {
      return new IntegerColumnFilterQuery(this, DbTaskData.QueryView.VIEW_COLUMN_TASK_ID);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterableColumns#activatorName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public IStringColumnFilterQuery activatorName()
    {
      return new StringColumnFilterQuery(this, DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterableColumns#activatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public IStringColumnFilterQuery activatorDisplayName()
    {
      return new StringColumnFilterQuery(this, DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_DISPLAY_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterableColumns#expiryActivatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public IStringColumnFilterQuery expiryActivatorDisplayName()
    {
      return new StringColumnFilterQuery(this, DbTaskData.QueryView.VIEW_COLUMN_EXPIRY_ACTIVATOR_DISPLAY_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterableColumns#currentActivatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public IStringColumnFilterQuery currentActivatorDisplayName()
    {
      return new StringColumnFilterQuery(this, DbTaskData.QueryView.VIEW_COLUMN_CURRENT_ACTIVATOR_DISPLAY_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterableColumns#isUnassigned()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public IBooleanColumnFilterQuery isUnassigned()
    {
      return new BooleanColumnFilterQuery(this, DbTaskData.QueryView.VIEW_COLUMN_IS_UNASSIGNED);
    }

  }

  /**
   * Basic filter functionality provider for a column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IColumnFilterQuery
  {
    /**
     * <p>Adds a filter condition that selects rows with NULL values.</p>
     * <p>SQL part: <code>[column] IS NULL</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNull();

    /**
     * <p>Adds a filter condition that selects rows that do not have NULL values.</p>
     * <p>SQL part: <code>[column] IS NOT NULL</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotNull();
  }

  /**
   * Basic filter functionality provider for a column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  private static class ColumnFilterQuery extends TaskQuery implements IColumnFilterQuery
  {
    private ColumnName column;

    private ColumnFilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery,  ColumnName column)
    {
      super(parentQuery);
      startColumnFilter(column);
      this.column = column;
    }

    /**
     * @return -
     */
    protected ColumnName getColumn()
    {
      return column;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IColumnFilterQuery#isNull()
     */
    @Override
    public FilterLink isNull()
    {
      endColumnFilter();
      getQueryBuilder().isNull(getColumn());
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IColumnFilterQuery#isNull()
     */
    @Override
    public FilterLink isNotNull()
    {
      endColumnFilter();
      getQueryBuilder().isNotNull(getColumn());
      return new FilterLink(this);
    }
  }


  /**
   * Provides filter functionality for a clob column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IClobColumnFilterQuery extends IColumnFilterQuery
  {
    /**
     * <p>Adds a filter condition that selects rows that have values that are like the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] IS LIKE '[value]'</code></p>
     * <p>The operation might be case sensitive or insensitive depending on the database system.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * <p>This method might be faster than {@link #isLikeIgnoreCase(String)} 
     * because indexes are used if available and the value does not start with wildcards.</p>
     * @param value
     * @return query for further composition
     * @see #isLikeIgnoreCase(String)
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLike(String value);
    
    /**
     * <p>Adds a filter condition that selects rows that have values that are like the given <code>value</code> ignoring case.</p>
     * <p>SQL part: <code>LOWER([column]) IS LIKE LOWER('[value]')</code></p>
     * <p>The operation is case insensitive (ignores case). E.g. 'a' is equal to 'A'.</p>
     * <p style="color:red;">This method might be slower than {@link #isLike(String)} because indexes cannot be used.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * @param value
     * @return query for further composition
     * @see #isLike(String)
     * @since 6.7
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="10.7.2017", reviewers="rwei,pes")
    public FilterLink isLikeIgnoreCase(String value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are not like the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] IS NOT LIKE '[value]'</code></p>
     * <p>The operation might be case sensitive or insensitive depending on the database system.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * <p>This method might be faster than {@link #isNotLikeIgnoreCase(String)} 
     * because indexes are used if available and the value does not start with wildcards.</p>
     * @param value
     * @return query for further composition
     * @see #isNotLikeIgnoreCase(String)
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotLike(String value);
    
    /**
     * <p>Adds a filter condition that selects rows that have values that are not like the given <code>value</code> ignoring case.</p>
     * <p>SQL part: <code>LOWER([column]) IS NOT LIKE LOWER('[value]')</code></p>
     * <p>The operation is case insensitive (ignores case). E.g. 'a' is equal to 'A'.</p>
     * <p style="color:red;">This method might be slower than {@link #isNotLike(String)} because indexes cannot be used.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * @param value
     * @return query for further composition
     * @see #isNotLike(String)
     * @since 6.7
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="10.7.2017", reviewers="rwei,pes")
    public FilterLink isNotLikeIgnoreCase(String value);
  }

  /**
   * Provides filter functionality for a clob column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  static class ClobColumnFilterQuery extends ColumnFilterQuery implements IClobColumnFilterQuery
  {
    public ClobColumnFilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery,  ColumnName column)
    {
      super(parentQuery, column);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isLike(String)
     */
    @Override
    public FilterLink isLike(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().like(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isLikeIgnoreCase(String)
     */
    @Override
    public FilterLink isLikeIgnoreCase(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().likeIgnoreCase(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isNotLike(String)
     */
    @Override
    public FilterLink isNotLike(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().notLike(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isNotLikeIgnoreCase(String)
     */
    @Override
    public FilterLink isNotLikeIgnoreCase(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().notLikeIgnoreCase(getColumn(), value);
      return new FilterLink(this);
    }

  }

  /**
   * Provides filter functionality for a string column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IStringColumnFilterQuery extends IClobColumnFilterQuery
  {
    /**
     * <p>Adds a filter condition that selects rows with the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] = '[value]'</code> or <code>[column] IS NULL</code></p>
     * <p>The operation might be case sensitive or insensitive depending on the database system.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * <p>This method might be faster than {@link #isEqualIgnoreCase(String)} because indexes are used if available.</p>
     * @param value
     * @return query for further composition
     * @see #isEqualIgnoreCase(String)
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isEqual(String value);
    
    /**
     * <p>Adds a filter condition that selects rows with the given <code>value</code> ignoring case.</p>
     * <p>SQL part: <code>LOWER([column]) = LOWER('[value]')</code> or <code>[column] IS NULL</code></p>
     * <p>The operation is case insensitive (ignores case). E.g. 'a' is equal to 'A'.</p>
     * <p style="color:red;">This method might be slower than {@link #isEqual(String)} because indexes cannot be used.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * @param value
     * @return query for further composition
     * @see #isEqual(String)
     * @since 6.7
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="10.7.2017", reviewers="rwei,pes")
    public FilterLink isEqualIgnoreCase(String value);

    /**
     * <p>Adds a filter condition that selects rows that do not have the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;&gt; '[value]'</code></p>
     * <p>The operation might be case sensitive or insensitive depending on the database system.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * <p>This method might be faster than {@link #isNotEqualIgnoreCase(String)} because indexes are used if available.</p>
     * @param value
     * @return query for further composition
     * @see #isNotEqualIgnoreCase(String)
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotEqual(String value);
    
    /**
     * <p>Adds a filter condition that selects rows that do not have the given <code>value</code> ignoring case.</p>
     * <p>SQL part: <code>LOWER([column]) &lt;&gt; LOWER('[value]')</code> or <code>[column] IS NULL</code></p>
     * <p>The operation is case insensitive (ignores case). E.g. 'a' is equal to 'A'.</p>
     * <p style="color:red;">This method might be slower than {@link #isNotEqual(String)} because indexes cannot be used.
     * See <i>Engine Guide > System Database > Character set and collation</i> for details.</p>
     * @param value
     * @return query for further composition
     * @see #isNotEqual(String)
     * @since 6.7
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="10.7.2017", reviewers="rwei,pes")
    public FilterLink isNotEqualIgnoreCase(String value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are greater than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt; '[value]'</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterThan(String value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are greater than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt;= '[value]'</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterOrEqualThan(String value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are lower than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt; '[value]'</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerThan(String value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are lower or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;= '[value]'</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerOrEqualThan(String value);
  }

  /**
   * Provides filter functionality for a string column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  static class StringColumnFilterQuery extends ClobColumnFilterQuery implements IStringColumnFilterQuery
  {
    public StringColumnFilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery,  ColumnName column)
    {
      super(parentQuery, column);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isEqual(String)
     */
    @Override
    public FilterLink isEqual(String value)
    {
      endColumnFilter();
      getQueryBuilder().equal(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isEqualIgnoreCase(String)
     */
    @Override
    public FilterLink isEqualIgnoreCase(String value)
    {
      endColumnFilter();
      getQueryBuilder().equalIgnoreCase(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isNotEqual(String)
     */
    @Override
    public FilterLink isNotEqual(String value)
    {
      endColumnFilter();
      getQueryBuilder().unequal(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isNotEqualIgnoreCase(String)
     */
    @Override
    public FilterLink isNotEqualIgnoreCase(String value)
    {
      endColumnFilter();
      getQueryBuilder().unequalIgnoreCase(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isGreaterThan(String)
     */
    @Override
    public FilterLink isGreaterThan(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().greaterThan(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isGreaterOrEqualThan(String)
     */
    @Override
    public FilterLink isGreaterOrEqualThan(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().greaterOrEqualThan(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isLowerThan(String)
     */
    @Override
    public FilterLink isLowerThan(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().lowerThan(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IStringColumnFilterQuery#isLowerOrEqualThan(String)
     */
    @Override
    public FilterLink isLowerOrEqualThan(String value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().lowerOrEqualThan(getColumn(), value);
      return new FilterLink(this);
    }
  }

  /**
   * Provides filter functionality for a decimal number column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface INumberColumnFilterQuery extends IColumnFilterQuery
  {

    /**
     * <p>Adds a filter condition that selects rows with the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] = [value]</code> or <code>[column] IS NULL</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isEqual(Number value);

    /**
     * <p>Adds a filter condition that selects rows that do not have the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;&gt; [value]</code> or <code>[column] IS NOT NULL</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotEqual(Number value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are greater than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt; [value]</code></p>
     * @param value
     * @return query for further composition
     * @throws IllegalArgumentException If the given value is null
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterThan(Number value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are greater or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt;= [value]</code></p>
     * @param value
     * @return query for further composition
     * @throws IllegalArgumentException If the given value is null
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterOrEqualThan(Number value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are lower than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt; [value]</code></p>
     * @param value
     * @return query for further composition
     * @throws IllegalArgumentException If the given value is null
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerThan(Number value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are lower or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;= [value]</code></p>
     * @param value
     * @return query for further composition
     * @throws IllegalArgumentException If the given value is null
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerOrEqualThan(Number value);
  }

  /**
   * Provides filter functionality for a decimal number column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  private static class NumberColumnFilterQuery extends ColumnFilterQuery implements INumberColumnFilterQuery
  {
    private NumberColumnFilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery,  ColumnName column)
    {
      super(parentQuery, column);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.INumberColumnFilterQuery#isEqual(Number)
     */
    @Override
    public FilterLink isEqual(Number value)
    {
      endColumnFilter();
      getQueryBuilder().equal(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.INumberColumnFilterQuery#isNotEqual(Number)
     */
    @Override
    public FilterLink isNotEqual(Number value)
    {
      endColumnFilter();
      getQueryBuilder().unequal(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.INumberColumnFilterQuery#isGreaterThan(Number)
     */
    @Override
    public FilterLink isGreaterThan(Number value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().greaterThan(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.INumberColumnFilterQuery#isGreaterOrEqualThan(Number)
     */
    @Override
    public FilterLink isGreaterOrEqualThan(Number value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().greaterOrEqualThan(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.INumberColumnFilterQuery#isLowerThan(Number)
     */
    @Override
    public FilterLink isLowerThan(Number value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().lowerThan(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.INumberColumnFilterQuery#isLowerOrEqualThan(Number)
     */
    @Override
    public FilterLink isLowerOrEqualThan(Number value)
    {
      API.checkParameterNotNull(value, "value");
      endColumnFilter();
      getQueryBuilder().lowerOrEqualThan(getColumn(), value);
      return new FilterLink(this);
    }
  }

  /**
   * Provides filter functionality for an integer column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IIntegerColumnFilterQuery extends IColumnFilterQuery
  {
    /**
     * <p>Adds a filter condition that selects rows with the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] = [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.HIDDEN)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isEqual(int value);

    /**
     * <p>Adds a filter condition that selects rows with the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] = [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isEqual(long value);

    /**
     * <p>Adds a filter condition that selects rows that do not have the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;&gt; [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.HIDDEN)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotEqual(int value);

    /**
     * <p>Adds a filter condition that selects rows that do not have the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;&gt; [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotEqual(long value);
    
    /**
     * <p>Adds a filter condition that selects rows that have values that are greater than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt; [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.HIDDEN)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterThan(int value);
    
    /**
     * <p>Adds a filter condition that selects rows that have values that are greater than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt; [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterThan(long value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are greater or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt;= [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.HIDDEN)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterOrEqualThan(int value);
    
        /**
     * <p>Adds a filter condition that selects rows that have values that are greater or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &gt;= [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isGreaterOrEqualThan(long value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are lower than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt; [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.HIDDEN)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerThan(int value);

    /**
     * <p>Adds a filter condition that selects rows that have values that are lower than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt; [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerThan(long value);
    
    /**
     * <p>Adds a filter condition that selects rows that have values that are lower or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;= [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.HIDDEN)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerOrEqualThan(int value);
    
        /**
     * <p>Adds a filter condition that selects rows that have values that are lower or equal than the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;= [value]</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isLowerOrEqualThan(long value);
  }

  /**
   * Provides filter functionality for an integer column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  public static class IntegerColumnFilterQuery extends ColumnFilterQuery implements IIntegerColumnFilterQuery
  {
    private NumberColumnFilterQuery numberFilter;

    IntegerColumnFilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery, ColumnName column)
    {
      super(parentQuery, column);
      numberFilter = new NumberColumnFilterQuery(parentQuery, column);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isEqual(int)
     */
    @Override
    public FilterLink isEqual(int value)
    {
      return numberFilter.isEqual(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isEqual(long)
     */
    @Override
    public FilterLink isEqual(long value)
    {
      return numberFilter.isEqual(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isNotEqual(int)
     */
    @Override
    public FilterLink isNotEqual(int value)
    {
      return numberFilter.isNotEqual(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isNotEqual(long)
     */
    @Override
    public FilterLink isNotEqual(long value)
    {
      return numberFilter.isNotEqual(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isGreaterThan(int)
     */
    @Override
    public FilterLink isGreaterThan(int value)
    {
      return numberFilter.isGreaterThan(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isGreaterThan(long)
     */
    @Override
    public FilterLink isGreaterThan(long value)
    {
      return numberFilter.isGreaterThan(value);
    }
    
    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isGreaterOrEqualThan(int)
     */
    @Override
    public FilterLink isGreaterOrEqualThan(int value)
    {
      return numberFilter.isGreaterOrEqualThan(value);
    }
    
    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isGreaterOrEqualThan(long)
     */
    @Override
    public FilterLink isGreaterOrEqualThan(long value)
    {
      return numberFilter.isGreaterOrEqualThan(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isLowerThan(int)
     */
    @Override
    public FilterLink isLowerThan(int value)
    {
      return numberFilter.isLowerThan(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isLowerThan(long)
     */
    @Override
    public FilterLink isLowerThan(long value)
    {
      return numberFilter.isLowerThan(value);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isLowerOrEqualThan(int)
     */
    @Override
    public FilterLink isLowerOrEqualThan(int value)
    {
      return numberFilter.isLowerOrEqualThan(value);
    }
    
    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IIntegerColumnFilterQuery#isLowerOrEqualThan(long)
     */
    @Override
    public FilterLink isLowerOrEqualThan(long value)
    {
      return numberFilter.isLowerOrEqualThan(value);
    }
  }


  /**
   * Provides filter functionality for a boolean column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IBooleanColumnFilterQuery extends IColumnFilterQuery
  {
    /**
     * <p>Adds a filter condition that selects rows with the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] = [value]</code> or <code>[column] IS NULL</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isEqual(Boolean value);

    /**
     * <p>Adds a filter condition that selects rows that do not have the given <code>value</code>.</p>
     * <p>SQL part: <code>[column] &lt;&gt; [value]</code> or <code>[column] IS NOT NULL</code></p>
     * @param value
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink isNotEqual(Boolean value);
  }

  /**
   * Provides filter functionality for a boolean column of {@link ch.ivyteam.ivy.workflow.ITask}
   */
  private static class BooleanColumnFilterQuery extends ColumnFilterQuery implements IBooleanColumnFilterQuery
  {
    private BooleanColumnFilterQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery,  ColumnName column)
    {
      super(parentQuery, column);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IBooleanColumnFilterQuery#isEqual(Boolean)
     */
    @Override
    public FilterLink isEqual(Boolean value)
    {
      endColumnFilter();
      getQueryBuilder().equal(getColumn(), value);
      return new FilterLink(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IBooleanColumnFilterQuery#isNotEqual(Boolean)
     */
    @Override
    public FilterLink isNotEqual(Boolean value)
    {
      endColumnFilter();
      getQueryBuilder().unequal(getColumn(), value);
      return new FilterLink(this);
    }
  }

  /**
   * Links a where condition with another.
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IFilterLink 
  {
    /**
     * <p>Adds an AND statement to the <code>where</code> condition. <br/>
     * Must be followed by other query conditions.</p>
     * <p>Note that {@link FilterLink#and() and} operations are always evaluated before {@link FilterLink#or() or} 
     * operations, e.g. the expression <code>A OR B AND C</code> is evaluated to <code>A OR (B AND C)</code>. 
     * If you need to get <code>(A OR B) AND C</code>, then use the {@link FilterLink#andOverall() andOverall} method.</p>
     * <p>Example <code>A OR (B AND C)</code>:
     * <code><pre>CaseQuery.create().description().isEqual("A").or().description().isEqual("B")
     *  .and().name().isEqual("C");</pre></code>
     * <p>SQL part: <code> AND </code></p>
     * @return query for further composition
     * @see #andOverall
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterQuery and();

    /**
     * <p>Adds and AND statement with the given filter <code>subQuery</code>.
     * Only the <code>where</code> condition of the given <code>subQuery</code> is considered. All other parts are ignored. 
     * The whole <code>where</code> condition of the given filter <code>subQuery</code> is and-ed to the query as one term with 
     * brackets around it.</p>  
     * 
     * <p>Note that {@link FilterLink#and(TaskQuery) and} operations are always evaluated before {@link FilterLink#or() or} 
     * operations, e.g. the expression <code>A OR B AND (subQuery)</code> is evaluated to <code>A OR (B AND (subQuery))</code>. 
     * If you need to get <code>(A OR B) AND (subQuery)</code>, then use the {@link FilterLink#andOverall(TaskQuery) andOverall} method.</p>
     * <p>Example <code>A AND (B OR C)</code>:
     * <code><pre>CaseQuery.create().description().isEqual("A")
     *  .and(CaseQuery.create().name().isEqual("B").or().name().isEqual("C"));</pre></code>
     * <p>SQL part: <code> AND([subQueryWhereClause]) </code></p>
     * @param subQuery query with a set of where conditions.
     * @return query for further composition
     * @throws IllegalArgumentException when the query parameter is the same instance or null.
     * @see #andOverall(TaskQuery)
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink and(TaskQuery subQuery);

    /**
     * <p>Adds an AND statement to the <strong>whole</strong> <code>where</code> condition configured before. <br/>
     * Must be followed by other query conditions.</p>
     * <p>Example <code>(A OR B) AND C</code>:
     * <code><pre>CaseQuery.create().description().isEqual("A").or().description().isEqual("B")
     *  .andOverall().name().isEqual("C");</pre></code>
     * @return query for further composition
     * @see #and
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="10.07.2017", reviewers="rwei,rew,cst")
    public FilterQuery andOverall();

    /**
     * <p>Adds and AND statement with the given filter <code>subQuery</code> to the <strong>whole</strong> <code>where</code> condition configured before.
     * Only the <code>where</code> condition of the given <code>subQuery</code> is considered. All other parts are ignored. 
     * The <strong>whole</strong> <code>where</code> condition of the given filter <code>subQuery</code> is and-ed to the query as one term with 
     * brackets around it.</p>  
     * <p>Example (A OR B) AND (C OR D):
     * <code><pre>CaseQuery.create().description().isEqual("A").or().description().isEqual("B")
     *  .andOverall(CaseQuery.create().name().isEqual("C").or().name().isEqual("D"));</pre></code>
     * <p>SQL part: <code> AND([subQueryWhereClause]) </code></p>
     * @param subQuery query with a set of where conditions.
     * @return query for further composition
     * @throws IllegalArgumentException when the query parameter is the same instance or null.
     * @see #and(TaskQuery)
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="10.07.2017", reviewers="rwei,rew,cst")
    public FilterLink andOverall(TaskQuery subQuery);

    /**
     * <p>Adds an OR statement to the <code>where</code> condition. <br/>
     * Must be followed by other query conditions.</p>
     * <p>Note that {@link FilterLink#and() and} operations are evaluated before {@link FilterLink#or() or} operations.
     * E.g. the expression <code>A and B or C</code> is evaluated like <code>(A and B) or C</code></p>
     * <p>SQL part: <code> OR </code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterQuery or();

    /**
     * <p>Adds and OR statement with the given filter <code>subQuery</code>.<br>
     * Only the <code>where</code> condition of the given <code>subQuery</code> is considered. All other parts are ignored.
     * The whole <code>where</code> condition of the given filter <code>subQuery</code> is or-ed to the query as one term with 
     * brackets around it.</p>      
     * <p>Note that {@link FilterLink#and() and} operations are always evaluated before {@link FilterLink#or() or} 
     * operations, e.g. the expression <code>A AND B OR C</code> is evaluated to <code>(A AND B) OR C</code>. 
     * If you need to get <code>A AND (B OR C)</code>, then use this method to add a sub query (<code>B OR C</code>) 
     * with a <code>AND</code> operation to the current query (A).</p>
     * <p>SQL part: <code> OR([subQueryWhereClause]) </code></p>
     * @param subQuery query with a set of where conditions.
     * @return query for further composition
     * @throws IllegalArgumentException when the query parameter is the same instance or null.
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink or(TaskQuery subQuery);
  }
  
  /**
   * Links a where condition with another.
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public static class FilterLink extends TaskQuery implements IFilterLink
  {
    FilterLink(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery)
    {
      super(parentQuery);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterLink#and()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterQuery and()
    {
      getQueryBuilder().and();
      startAndOrOperation("and()");
      return new FilterQuery(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterLink#and(TaskQuery)
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink and(TaskQuery subQuery)
    {
      getQueryBuilder().and(getFilterForSubExpression(subQuery));
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterLink#andOverall()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    public FilterQuery andOverall()
    {
      getQueryBuilder().andOverall();
      startAndOrOperation("overallAnd()");
      return new FilterQuery(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterLink#andOverall(TaskQuery)
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    public FilterLink andOverall(TaskQuery subQuery)
    {
      getQueryBuilder().andOverall(getFilterForSubExpression(subQuery));
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterLink#or()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterQuery or()
    {
      getQueryBuilder().or();
      startAndOrOperation("or()");
      return new FilterQuery(this);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IFilterLink#or(TaskQuery)
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public FilterLink or(TaskQuery subQuery)
    {
      getQueryBuilder().or(getFilterForSubExpression(subQuery));
      return this;
    }
  }

  /**
   * Provides methods to group the result by certain fields.
 *

   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IGroupByQueryColumns
  {
    /**
     * <p>Groups the result of the query by the field <code>TaskId</code>.</p>
     * <p>SQL part: <code>GROUP BY TaskId</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public GroupByQuery taskId();

    /**
     * <p>Groups the result of the query by the field <code>ActivatorName</code>.</p>
     * <p>SQL part: <code>GROUP BY ActivatorName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public GroupByQuery activatorName();

    /**
     * <p>Groups the result of the query by the field <code>ActivatorDisplayName</code>.</p>
     * <p>SQL part: <code>GROUP BY ActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public GroupByQuery activatorDisplayName();

    /**
     * <p>Groups the result of the query by the field <code>ExpiryActivatorDisplayName</code>.</p>
     * <p>SQL part: <code>GROUP BY ExpiryActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public GroupByQuery expiryActivatorDisplayName();

    /**
     * <p>Groups the result of the query by the field <code>CurrentActivatorDisplayName</code>.</p>
     * <p>SQL part: <code>GROUP BY CurrentActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public GroupByQuery currentActivatorDisplayName();

    /**
     * <p>Groups the result of the query by the field <code>IsUnassigned</code>.</p>
     * <p>SQL part: <code>GROUP BY IsUnassigned</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public GroupByQuery isUnassigned();

  }

  /**
   * Provides methods to group the result by certain fields.
 *
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public static class GroupByQuery extends TaskQuery implements IGroupByQueryColumns
  {
    GroupByQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery)
    {
      super(parentQuery);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IGroupByQueryColumns#taskId()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public GroupByQuery taskId()
    {
      getQueryBuilder().groupBy(DbTaskData.QueryView.VIEW_COLUMN_TASK_ID, "TaskId");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IGroupByQueryColumns#activatorName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public GroupByQuery activatorName()
    {
      getQueryBuilder().groupBy(DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_NAME, "ActivatorName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IGroupByQueryColumns#activatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public GroupByQuery activatorDisplayName()
    {
      getQueryBuilder().groupBy(DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_DISPLAY_NAME, "ActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IGroupByQueryColumns#expiryActivatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public GroupByQuery expiryActivatorDisplayName()
    {
      getQueryBuilder().groupBy(DbTaskData.QueryView.VIEW_COLUMN_EXPIRY_ACTIVATOR_DISPLAY_NAME, "ExpiryActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IGroupByQueryColumns#currentActivatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public GroupByQuery currentActivatorDisplayName()
    {
      getQueryBuilder().groupBy(DbTaskData.QueryView.VIEW_COLUMN_CURRENT_ACTIVATOR_DISPLAY_NAME, "CurrentActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IGroupByQueryColumns#isUnassigned()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public GroupByQuery isUnassigned()
    {
      getQueryBuilder().groupBy(DbTaskData.QueryView.VIEW_COLUMN_IS_UNASSIGNED, "IsUnassigned");
      return this;
    }

  }

  /**
   * Provides methods to order the result by columns of {@link ch.ivyteam.ivy.workflow.ITask}.
 *
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public interface IOrderByQueryColumns
  {
    /**
     * <p>Adds an order by statement for the column <code>TaskId</code> in the default direction ascending.<br>
     * To change the order to descending use <code>taskId().descending()</code></p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().taskId()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY TaskId ASC</code></p>
     * @return query for further composition
     * @see OrderByColumnQuery#descending()
     * @see OrderByColumnQuery#ascending()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByColumnQuery taskId();

    /**
     * <p>Adds an order by statement for the column <code>ActivatorName</code> in the default direction ascending.<br>
     * To change the order to descending use <code>activatorName().descending()</code></p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().activatorName()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY ActivatorName ASC</code></p>
     * @return query for further composition
     * @see OrderByColumnQuery#descending()
     * @see OrderByColumnQuery#ascending()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByColumnQuery activatorName();

    /**
     * <p>Adds an order by statement for the column <code>ActivatorDisplayName</code> in the default direction ascending.<br>
     * To change the order to descending use <code>activatorDisplayName().descending()</code></p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().activatorDisplayName()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY ActivatorDisplayName ASC</code></p>
     * @return query for further composition
     * @see OrderByColumnQuery#descending()
     * @see OrderByColumnQuery#ascending()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByColumnQuery activatorDisplayName();

    /**
     * <p>Adds an order by statement for the column <code>ExpiryActivatorDisplayName</code> in the default direction ascending.<br>
     * To change the order to descending use <code>expiryActivatorDisplayName().descending()</code></p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().expiryActivatorDisplayName()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY ExpiryActivatorDisplayName ASC</code></p>
     * @return query for further composition
     * @see OrderByColumnQuery#descending()
     * @see OrderByColumnQuery#ascending()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByColumnQuery expiryActivatorDisplayName();

    /**
     * <p>Adds an order by statement for the column <code>CurrentActivatorDisplayName</code> in the default direction ascending.<br>
     * To change the order to descending use <code>currentActivatorDisplayName().descending()</code></p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().currentActivatorDisplayName()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY CurrentActivatorDisplayName ASC</code></p>
     * @return query for further composition
     * @see OrderByColumnQuery#descending()
     * @see OrderByColumnQuery#ascending()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByColumnQuery currentActivatorDisplayName();

    /**
     * <p>Adds an order by statement for the column <code>IsUnassigned</code> in the default direction ascending.<br>
     * To change the order to descending use <code>isUnassigned().descending()</code></p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().isUnassigned()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY IsUnassigned ASC</code></p>
     * @return query for further composition
     * @see OrderByColumnQuery#descending()
     * @see OrderByColumnQuery#ascending()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByColumnQuery isUnassigned();

  }

  /**
   * Provides methods to order the result by columns of {@link ch.ivyteam.ivy.workflow.ITask}.
 *
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public static class OrderByQuery extends TaskQuery implements IOrderByQueryColumns
  {
    OrderByQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery)
    {
      super(parentQuery);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IOrderByQueryColumns#taskId()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public OrderByColumnQuery taskId()
    {
      return new OrderByColumnQuery(this, DbTaskData.QueryView.VIEW_COLUMN_TASK_ID);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IOrderByQueryColumns#activatorName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public OrderByColumnQuery activatorName()
    {
      return new OrderByColumnQuery(this, DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IOrderByQueryColumns#activatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public OrderByColumnQuery activatorDisplayName()
    {
      return new OrderByColumnQuery(this, DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_DISPLAY_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IOrderByQueryColumns#expiryActivatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public OrderByColumnQuery expiryActivatorDisplayName()
    {
      return new OrderByColumnQuery(this, DbTaskData.QueryView.VIEW_COLUMN_EXPIRY_ACTIVATOR_DISPLAY_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IOrderByQueryColumns#currentActivatorDisplayName()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public OrderByColumnQuery currentActivatorDisplayName()
    {
      return new OrderByColumnQuery(this, DbTaskData.QueryView.VIEW_COLUMN_CURRENT_ACTIVATOR_DISPLAY_NAME);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IOrderByQueryColumns#isUnassigned()
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    @Override
    public OrderByColumnQuery isUnassigned()
    {
      return new OrderByColumnQuery(this, DbTaskData.QueryView.VIEW_COLUMN_IS_UNASSIGNED);
    }

  }

  /**
   * Provides methods to define the direction of the sorting either ascending or descending.
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
  public static class OrderByColumnQuery extends OrderByQuery
  {
    private ColumnName column;

    private OrderByColumnQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery,  ColumnName column)
    {
      super(parentQuery);
      this.column = column;
      getQueryBuilder().orderByAsc(column);
    }

    /**
     * <p>Sorts the column in ascending direction.</p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().name().ascending()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY [column] ASC</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByQuery ascending()
    {
      getQueryBuilder().removeLastOrderBy().orderByAsc(column);
      return new OrderByQuery(this);
    }

    /**
     * <p>Sorts the column in descending direction.</p>
     * <p><b>Example:</b><br>
     * <code><pre>TaskQuery.create().orderBy().name().descending()</pre></code>
     * </p>
     * <p>SQL part: <code>ORDER BY [column] DESC</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="17.1.2012", reviewers="bb,fs,rwei")
    public OrderByQuery descending()
    {
      getQueryBuilder().removeLastOrderBy().orderByDesc(column);
      return new OrderByQuery(this);
    }
  }
  
  /**
   * Provides methods to perform aggregations on the query. For each aggregation a column is added to the result set.
 *
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
  public interface IAggregationQuery
  {

    /**
     * <p>Adds a result column <code>Count</code> to the query, that contains the number of (grouped) rows.</p>
     * <p>SQL part: <code>COUNT(*) AS Count</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery countRows();

    /**
     * <p>Adds a result column <code>MinTaskId</code> to the query, that contains the minimum value of the field <code>TaskId</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MIN(TaskId) AS MinTaskId</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minTaskId();

    /**
     * <p>Adds a result column <code>MaxTaskId</code> to the query, that contains the maximum value of the field <code>TaskId</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MAX(TaskId) AS MaxTaskId</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxTaskId();

    /**
     * <p>Adds a result column <code>MinActivatorName</code> to the query, that contains the minimum value of the field <code>ActivatorName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MIN(ActivatorName) AS MinActivatorName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minActivatorName();

    /**
     * <p>Adds a result column <code>MaxActivatorName</code> to the query, that contains the maximum value of the field <code>ActivatorName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MAX(ActivatorName) AS MaxActivatorName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxActivatorName();

    /**
     * <p>Adds a result column <code>MinActivatorDisplayName</code> to the query, that contains the minimum value of the field <code>ActivatorDisplayName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MIN(ActivatorDisplayName) AS MinActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minActivatorDisplayName();

    /**
     * <p>Adds a result column <code>MaxActivatorDisplayName</code> to the query, that contains the maximum value of the field <code>ActivatorDisplayName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MAX(ActivatorDisplayName) AS MaxActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxActivatorDisplayName();

    /**
     * <p>Adds a result column <code>MinExpiryActivatorDisplayName</code> to the query, that contains the minimum value of the field <code>ExpiryActivatorDisplayName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MIN(ExpiryActivatorDisplayName) AS MinExpiryActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minExpiryActivatorDisplayName();

    /**
     * <p>Adds a result column <code>MaxExpiryActivatorDisplayName</code> to the query, that contains the maximum value of the field <code>ExpiryActivatorDisplayName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MAX(ExpiryActivatorDisplayName) AS MaxExpiryActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxExpiryActivatorDisplayName();

    /**
     * <p>Adds a result column <code>MinCurrentActivatorDisplayName</code> to the query, that contains the minimum value of the field <code>CurrentActivatorDisplayName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MIN(CurrentActivatorDisplayName) AS MinCurrentActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minCurrentActivatorDisplayName();

    /**
     * <p>Adds a result column <code>MaxCurrentActivatorDisplayName</code> to the query, that contains the maximum value of the field <code>CurrentActivatorDisplayName</code> of all (grouped) rows.</p>
     * <p>SQL part: <code>MAX(CurrentActivatorDisplayName) AS MaxCurrentActivatorDisplayName</code></p>
     * @return query for further composition
     */
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxCurrentActivatorDisplayName();

  }

  /**
   * This class provides methods to perform aggregations on the query. For each aggregation a column is added to the result set.
   *
   */
  @PublicAPI(IvyScriptVisibility.EXPERT)
  @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
  public static class AggregationQuery extends TaskQuery implements IAggregationQuery
  {
    /**
     * Constructor
     * @param parentQuery
     */
    AggregationQuery(Query<ch.ivyteam.ivy.workflow.ITask> parentQuery)
    {
      super(parentQuery);
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#countRows()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery countRows()
    {
      getQueryBuilder().addCount("Count");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#minTaskId()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minTaskId()
    {
      getQueryBuilder().addMin(DbTaskData.QueryView.VIEW_COLUMN_TASK_ID, "MinTaskId");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#maxTaskId()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxTaskId()
    {
      getQueryBuilder().addMax(DbTaskData.QueryView.VIEW_COLUMN_TASK_ID, "MaxTaskId");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#minActivatorName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minActivatorName()
    {
      getQueryBuilder().addMin(DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_NAME, "MinActivatorName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#maxActivatorName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxActivatorName()
    {
      getQueryBuilder().addMax(DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_NAME, "MaxActivatorName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#minActivatorDisplayName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minActivatorDisplayName()
    {
      getQueryBuilder().addMin(DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_DISPLAY_NAME, "MinActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#maxActivatorDisplayName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxActivatorDisplayName()
    {
      getQueryBuilder().addMax(DbTaskData.QueryView.VIEW_COLUMN_ACTIVATOR_DISPLAY_NAME, "MaxActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#minExpiryActivatorDisplayName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minExpiryActivatorDisplayName()
    {
      getQueryBuilder().addMin(DbTaskData.QueryView.VIEW_COLUMN_EXPIRY_ACTIVATOR_DISPLAY_NAME, "MinExpiryActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#maxExpiryActivatorDisplayName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxExpiryActivatorDisplayName()
    {
      getQueryBuilder().addMax(DbTaskData.QueryView.VIEW_COLUMN_EXPIRY_ACTIVATOR_DISPLAY_NAME, "MaxExpiryActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#minCurrentActivatorDisplayName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery minCurrentActivatorDisplayName()
    {
      getQueryBuilder().addMin(DbTaskData.QueryView.VIEW_COLUMN_CURRENT_ACTIVATOR_DISPLAY_NAME, "MinCurrentActivatorDisplayName");
      return this;
    }

    /**
     * @see ch.ivyteam.meta.query.TaskQuery.IAggregationQuery#maxCurrentActivatorDisplayName()
     */
    @Override
    @PublicAPI(IvyScriptVisibility.EXPERT)
    @Reviewed(date="16.01.2012", reviewers="mda,bb,fs")
    public AggregationQuery maxCurrentActivatorDisplayName()
    {
      getQueryBuilder().addMax(DbTaskData.QueryView.VIEW_COLUMN_CURRENT_ACTIVATOR_DISPLAY_NAME, "MaxCurrentActivatorDisplayName");
      return this;
    }

  }
  
  @Override
  public String toString()
  {
    String sql = super.toString();
    return StringUtils.replace(sql, "FROM ? ", "FROM IWA_Task ");
  }
  
}
