package ch.ivyteam.ivy.generator;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.zip.ZipException;

import org.apache.commons.io.FileUtils;

import ch.ivyteam.util.FilenameUtils;

/**
 * This class writes an html table that contains information about all
 * 3rd party jar files that are provided by ivyTeam. The jar files must be installed at the current directory location. The generated information can 
 * be used to be included in the ReadMe of ivy 
 * @author rwei
 * @since 24.12.2010
 */
public class Server3rdPartyJarReadmeGenerator
{
  private StringBuilder html = new StringBuilder();
  
  public String printLibraryTable(File libraryDir) throws Exception
  {
    printTableHeader();
    if (libraryDir.exists() && libraryDir.isDirectory())
    {
      List<LibraryEntry> dependencies = getDependencies(libraryDir, FileUtils.listFiles(libraryDir, new String[]{"jar"}, true));
      LibraryEntry.enhanceConcurrent(dependencies);
      for(LibraryEntry dependency : dependencies)
      {
        print(dependency.toHtmlRow());
      }
    }
    else
    {
      printDirectoryNotExistingFailure(libraryDir);
    }
    printTableFooter();
    
    return html.toString();
  }

  private void printTableHeader()
  {
    print("<!-- The following library table was generated by the "+Server3rdPartyJarReadmeGenerator.class.getCanonicalName()+" //-->");
    print("<table class=\"table table-hover table-bordered\">");
    print("  <thead>");
    print("    <tr>");
    print("      <th>Jar</th>");
    print("      <th>Name</th>");
    print("      <th>Version</th>");
    print("    </tr>");
    print("  </thead>");
    print("  <tbody>");
  }

  private List<LibraryEntry> getDependencies(File rootDir, Collection<File> files) throws IOException, ZipException
  {
    List<LibraryEntry> dependencies = new ArrayList<>();
    for (File jar : files)
    {
      JarInfo info = JarInfo.createFor(jar);
      LibraryEntry entry = new LibraryEntry(null, FilenameUtils.getRelativePath(rootDir, jar), info);
      dependencies.add(entry);
    }
    Collections.sort(dependencies, new Comparator<LibraryEntry>(){
      @Override
      public int compare(LibraryEntry o1, LibraryEntry o2)
      {
        return o1.jarName.toLowerCase().compareTo(o2.jarName.toLowerCase());
      }
    });
    return dependencies;
  }
  
  private void printTableFooter()
  {
    print("  </tbody>");
    print("</table>");
  }
  
  private void printDirectoryNotExistingFailure(File directory)
  {
    print("<tr><td colspan=\"4\" style= \"color:red; font-weight:bold;\">The directory '"+directory.getAbsolutePath()+"' does not exist");
  }
  
  private void print(String line)
  {
    html.append(line+"\n");
  }

}
