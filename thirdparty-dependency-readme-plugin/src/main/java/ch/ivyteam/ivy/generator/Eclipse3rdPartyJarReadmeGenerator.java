package ch.ivyteam.ivy.generator;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Enumeration;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;

import ch.ivyteam.util.FilenameUtils;
import ch.ivyteam.xml.XmlUtil;

/**
 * This class writes an html table that contains information about all
 * jar files that are included in plugins provided by ivyTeam. The plugins must be installed at the current directory location. The generated information can 
 * be used to be included in the ReadMe of ivy 
 * @author rwei
 * @since 24.12.2010
 */
public class Eclipse3rdPartyJarReadmeGenerator
{
  /** Pattern to extract the Bundle-Vendor part of a manifest file */
  private static final Pattern BUNDLE_VENDOR_PATTERN =  Pattern.compile("Bundle-Vendor:(.*)");
  
  private final StringBuilder html = new StringBuilder();
  
  /**
   * Analyses the jar files included in ivyTeam provided plugins.
   * Set the current directory location to the installation directory of an ivy Designer. 
   * @param designerDir 
   * @return html
   * @throws ZipException 
   * @throws IOException 
   */
  public String generate(File designerDir) throws ZipException, IOException
  {
    printHtml("<!-- The following library table was generated by the "+Eclipse3rdPartyJarReadmeGenerator.class.getCanonicalName()+" //-->");
    printHtml("<table class=\"table table-hover\">");
    printHtml("  <thead>");
    printHtml("    <tr>");
    printHtml("      <th>Plugin</th>");
    printHtml("      <th>Jar</th>");
    printHtml("      <th>Name</th>");
    printHtml("      <th>Version</th>");
    printHtml("      <th>Provider</th>");
    printHtml("    </tr>");
    printHtml("  </thead>");
    printHtml("  <tbody>");
    
    printPlugins(designerDir);
    
    printHtml("  </tbody>");
    printHtml("</table>");
    
    return html.toString();
  }

  private void printPlugins(File designerDir) throws IOException, ZipException
  {
    File plugins = new File(designerDir, "plugins");
    if (plugins.exists() && plugins.isDirectory())
    {
      for (File plugin : plugins.listFiles((FileFilter)new OrFileFilter(DirectoryFileFilter.INSTANCE, new SuffixFileFilter(".jar", IOCase.INSENSITIVE))))
      {
        if (plugin.isDirectory())
        {
          findJarInDirectory(plugin);
        }
        else
        {
          findJarInPluginFile(new ZipFile(plugin));
        }
      }
    }
    else
    {
      printHtml("<tr><td colspan=\"5\" style= \"color:red; font-weight:bold;\">The directory '"+plugins.getAbsolutePath()+"' does not exist");
    }
  }

  /**
   * Finds jar files includes in the given plugin zip file
   * @param plugin
   * @throws IOException 
   */
  private void findJarInPluginFile(ZipFile plugin) throws IOException
  {    
    if (isIvyPlugin(plugin))
    {
      Enumeration<? extends ZipEntry> entries = plugin.entries();
      while (entries.hasMoreElements())
      {
        ZipEntry entry = entries.nextElement();
        if (entry.getName().toLowerCase().endsWith(".jar"))
        {
          reportZipJarEntry(plugin, entry);
        }
      }
    }
  }

  /**
   * Checks if the given plugin file is a ivyTeam provided plugin
   * @param plugin
   * @return true if ivyTeam provides this plugin, otherwise false
   * @throws IOException 
   */
  private static boolean isIvyPlugin(ZipFile plugin) throws IOException
  {
    return isIvyPlugin(JarInfo.getManifest(plugin));
  }

  /**
   * Checks if the given manifest was provided by an ivyTeam plugin
   * @param manifest
   * @return true if manifest was provided by an ivyTeam plugin
   */
  private static boolean isIvyPlugin(String manifest)
  {
    Matcher matcher;
    String provider;
    
    matcher = BUNDLE_VENDOR_PATTERN.matcher(manifest);    
    if (matcher.find())
    {
      provider = matcher.group(1);
      return provider.toLowerCase().contains("ivyteam");
    }
    return false;
  }

  /**
   * Report the given jar file entry in the given plugin zip file
   * @param plugin the plugin zip file
   * @param jarEntry the zip entry representing the jar file
   * @throws IOException 
   */
  private void reportZipJarEntry(ZipFile plugin, ZipEntry jarEntry) throws IOException
  {
    JarInfo info = JarInfo.createFor(plugin, jarEntry);
    if (info != null)
    {
      printHtml(getJarHtmlRow(normalizePluginName(plugin.getName()), jarEntry.getName(), info));
    }
  }

  /**
   * Reports a jar
   * @param pluginName the name of the plugin the jar is included
   * @param jarName the name of the jar
   * @param info
   * @return html
   */
  static String getJarHtmlRow(String pluginName, String jarName, JarInfo info)
  {
    StringBuilder rowHtml = new StringBuilder();
    
    if (info.getName() == null)
    {
      info.setName("n.a.");
    }
    if (info.getVersion() == null)
    {
      info.setVersion("n.a.");
    }
    if (info.getVendor() == null)
    {
      info.setVendor("n.a.");
    }    
       
    rowHtml.append("    <tr>\n");
    if (pluginName != null)
    {
      rowHtml.append("      <td>");
      rowHtml.append(XmlUtil.escapeHtmlAndConvertNewline(pluginName));
      rowHtml.append("</td>\n");
    }
    rowHtml.append("      <td>");
    rowHtml.append(XmlUtil.escapeHtmlAndConvertNewline(jarName));
    rowHtml.append("</td>\n");
    rowHtml.append("      <td>");
    rowHtml.append(XmlUtil.escapeHtmlAndConvertNewline(removeAllQoutes(info.getName())));
    rowHtml.append("</td>\n");
    rowHtml.append("      <td>");
    rowHtml.append(XmlUtil.escapeHtmlAndConvertNewline(removeAllQoutes(info.getVersion())));
    rowHtml.append("</td>\n");    
    rowHtml.append("      <td>");
    rowHtml.append(XmlUtil.escapeHtmlAndConvertNewline(removeAllQoutes(info.getVendor())));
    rowHtml.append("</td>\n");
    rowHtml.append("    </tr>");
    
    return rowHtml.toString();
  }
  
  private static String removeAllQoutes(String name)
  {
    if (name.startsWith("\"") || name.startsWith("'"))
    {
      name = name.substring(1, name.length());
    }
    if (name.endsWith("\"") || name.endsWith("'"))
    {
      name = name.substring(0, name.length() - 1);
    }
    return name;
  }

  /**
   * Finds all *.jar file in the given plugin directory
   * @param plugin the directory of the plugin 
   * @throws IOException 
   */
  private void findJarInDirectory(File plugin) throws IOException
  {
    if (isIvyPlugin(plugin))
    {
      for (File jarFile : FileUtils.listFiles(plugin, new String[]{"jar"}, true))
      {
        reportJarFile(plugin, jarFile);
      }
    }
  }

  /**
   * Checks if the given plugin is provided by ivyTeam
   * @param plugin plugin directory
   * @return true if provided by ivyTeam, otherwise false
   * @throws IOException 
   */
  private static boolean isIvyPlugin(File plugin) throws IOException
  {
    File metafile = new File(plugin, "META-INF/MANIFEST.MF");
    if (!metafile.exists())
    {
      return false;
    }
    String meta= FileUtils.readFileToString(metafile);
    return isIvyPlugin(meta);   
  }

  /**
   * Report the given jar file in the given plugin
   * @param plugin the plugin directory
   * @param jarFile the jar file to report
   * @throws IOException 
   * @throws ZipException 
   */
  private void reportJarFile(File plugin, File jarFile) throws ZipException, IOException
  {
    JarInfo info = JarInfo.createFor(jarFile);         
    printHtml(getJarHtmlRow(normalizePluginName(plugin.getName()), FilenameUtils.getRelativePath(plugin, jarFile), info));
  }
  
  /**
   * Normalizes the plugin name
   * @param name provided name
   * @return normalized name
   */
  private static String normalizePluginName(String name)
  {
    int pos = name.lastIndexOf('/');
    if (pos >= 0)
    {
      name = name.substring(pos+1);
    }
    pos = name.lastIndexOf('\\');
    if (pos >= 0)
    {
      name = name.substring(pos+1);
    }
    pos = name.indexOf('_');
    if (pos >= 0)
    {
      name = name.substring(0, pos);
    }
    return name;
  }
  
  private void printHtml(String line)
  {
    html.append(line).append("\n");
  }
}
